#!/usr/bin/env python3
"""angle_mapping.py ── export 29‑DoF motion & (optionally) replay in PyBullet
===========================================================================

* Extract 21‑DOF Euler angles from a poselib motion and convert to canonical
  29‑joint sequence (missing joints → 0). Saved as **walking_frame_angles.npy**.
* Replay in PyBullet **only if `HEADLESS = False`.**

Configure parameters by editing the constants below—no command‑line flags
needed anymore.
"""
from __future__ import annotations

import math
import pathlib
import sys
import time
from typing import Dict, List

import numpy as np  # type: ignore
import pybullet as p  # type: ignore

# ────────────────────────────────────────────────────────────────────────────
# USER CONFIGURATION (edit these)                                            
# ────────────────────────────────────────────────────────────────────────────
HEADLESS: bool = True  # True → p.DIRECT (no GUI); False → p.GUI
MOTION_FILE: str = "data/retarget_npy/predicted_data1.npy"
URDF_PATH: str = "G1_mimic/resources/robots/g1/g1_19dof.urdf"
OUT_FILE: str = "data/retarget_npy/dof_data/walk.npy"

# ────────────────────────────────────────────────────────────────────────────
# Poselib import helper                                                      
# ────────────────────────────────────────────────────────────────────────────
from skeleton.skeleton3d import SkeletonMotion  # type: ignore

# ---------------------------------------------------------------------------
# Canonical joint list (29 DOF) ---------------------------------------------
# ---------------------------------------------------------------------------
JOINT_CANONICAL = [
    "LeftHipPitch", "LeftHipRoll", "LeftHipYaw",
    "LeftKnee",
    "LeftAnklePitch", "LeftAnkleRoll",
    "RightHipPitch", "RightHipRoll", "RightHipYaw",
    "RightKnee",
    "RightAnklePitch", "RightAnkleRoll",
    "WaistYaw", "WaistRoll", "WaistPitch",
    "LeftShoulderPitch", "LeftShoulderRoll", "LeftShoulderYaw",
    "LeftElbow",
    "LeftWristRoll", "LeftWristPitch", "LeftWristYaw",
    "RightShoulderPitch", "RightShoulderRoll", "RightShoulderYaw",
    "RightElbow",
    "RightWristRoll", "RightWristPitch", "RightWristYaw",
]

FRAME_INDEX_TO_NAME = {
    0:"LeftHipPitch",1:"LeftHipRoll",2:"LeftHipYaw",3:"LeftKnee",4:"LeftAnklePitch",
    5:"RightHipPitch",6:"RightHipRoll",7:"RightHipYaw",8:"RightKnee",9:"RightAnklePitch",
    10:"WaistPitch",
    11:"LeftShoulderPitch",12:"LeftShoulderRoll",13:"LeftShoulderYaw",
    14:"LeftElbow",15:"LeftWristYaw",
    16:"RightShoulderPitch",17:"RightShoulderRoll",18:"RightShoulderYaw",
    19:"RightElbow",20:"RightWristYaw",
}
_EXPECTED_FRAME_LEN = 21

# ---------------------------------------------------------------------------
# Utility functions                                                           
# ---------------------------------------------------------------------------

def frame_angles_to_dict(frame: List[float] | np.ndarray | tuple[float,...]) -> Dict[str, float]:
    if len(frame) != _EXPECTED_FRAME_LEN:
        raise ValueError("frame length mismatch (expected 21)")
    d: Dict[str, float] = {k: 0.0 for k in JOINT_CANONICAL}
    for i, a in enumerate(frame):
        d[FRAME_INDEX_TO_NAME[i]] = float(a)
    return d


def get_motion_euler(path: str):
    """Return angles(F,21), root_quat(F,4), root_trans(F,3)."""
    # g1 其他关节都是按照 pitch row yaw的 父子关系
    # 但是 腰waist 是 yaw roll pitch 父子关系； 
    # 手腕 wrist是 roll pitch yaw; 
    # 后续需要时，get motion euler 可以进一步细化分解，暂时用不到先全部用P R Y
    mot = SkeletonMotion.from_file(path)
    dof_sizes = [3,1,1,3,1,1,1,3,1,1,3,1,1]
    rot = mot.local_rotation.numpy()  # (F,14,4)
    trans = mot.root_translation.numpy()

    ang_list, root_q = [], []
    for r in rot:
        root_q.append(r[0])
        child = r[1:]
        qx,qy,qz,qw = child[:,0],child[:,1],child[:,2],child[:,3]
        P,R,Y=[],[],[]
        for j,dof in enumerate(dof_sizes):
            q0,q1,q2,q3 = qw[j],qx[j],qy[j],qz[j]
            p = math.atan2(2*(q1*q3+q0*q2),1-2*(q1*q1+q2*q2))
            if dof==3:
                r = math.asin(max(-1,min(1,2*(q0*q1-q2*q3))))
                y = math.atan2(2*(q1*q2+q0*q3),1-2*(q2*q2+q3*q3))
            else:
                r=y=0.0
            P.append(p); R.append(r); Y.append(y)
        frame = np.stack([P,R,Y],1).reshape(-1)
        ang_list.append(frame[frame!=0])
    return (np.vstack(ang_list).astype(np.float32),
            np.vstack(root_q).astype(np.float32),
            trans.astype(np.float32))

# ---------------------------------------------------------------------------
# Main routine                                                                
# ---------------------------------------------------------------------------

def main() -> None:
    # 1) extract and save ---------------------------------------------------
    all_ang, root_q, root_t = get_motion_euler(MOTION_FILE)
    out = np.zeros((len(all_ang), len(JOINT_CANONICAL)), dtype=np.float32)
    for i, f in enumerate(all_ang):
        d = frame_angles_to_dict(f)
        out[i] = [d[n] for n in JOINT_CANONICAL]
    np.save(OUT_FILE, out)
    print(f"[info] saved {OUT_FILE}  (shape {out.shape})")

    

    # 2) optional replay ----------------------------------------------------
    mode = p.DIRECT if HEADLESS else p.GUI
    cid = p.connect(mode)
    print(f"[info] PyBullet connected in {'DIRECT' if HEADLESS else 'GUI'} mode (id={cid})")

    robot = p.loadURDF(URDF_PATH)
    joint_map = [1,2,3,4,5, 7,8,9,10,11, 15, 22,23,24,25,29, 30,31,32,33,37]


    for f, frame in enumerate(all_ang):
        p.resetBasePositionAndOrientation(robot, root_t[f], root_q[f])
        for local_idx, jid in enumerate(joint_map):
            p.resetJointState(robot, jid, frame[local_idx])
        if not HEADLESS:
            time.sleep(0.03)

    if not HEADLESS:
        print("[info] animation finished; press Ctrl+C to quit…")
        while True:
            p.stepSimulation(); time.sleep(1/150)
    else:
        print("[info] headless run complete")


if __name__ == "__main__":
    main()
